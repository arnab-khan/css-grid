[
    {
        "code": "overview",
        "slug": "overview",
        "heading": "Overview",
        "description": "CSS Grid is a powerful layout system that allows you to create complex grid-based layouts in a very straightforward and efficient manner. It's a part of the CSS specification that enables you to divide a webpage into rows and columns, and then place content within those areas.",
        "content": [
            {
                "code": "overview",
                "description": "To create a grid, you'll typically set the display property of the grid container to grid.",
                "outputHeight": 160,
                "outputMinWidth": 0
            }
        ]
    },
    {
        "code": "inline-grid",
        "slug": "inline-grid",
        "heading": "Inline Grid",
        "description": "The inline-grid value for the display property in CSS allows you to create a grid layout where the container behaves like an inline-level element, similar to inline elements like <span>.",
        "content": [
            {
                "code": "inline-grid",
                "outputHeight": 180,
                "outputMinWidth": 0
            }
        ]
    },
    {
        "code": "grid-template",
        "slug": "grid-template",
        "heading": "Grid Template",
        "description": "You can define the size of rows and columns using various units like pixels, percentages, or fractions.",
        "content": [
            {
                "code": "template-rows",
                "heading": "Template Rows",
                "description": "Rows in CSS Grid are horizontal tracks that run along the vertical axis of the grid. They define the vertical space in which grid items are placed. Each row can have a specific height, or it can adjust its height dynamically based on the content or available space.",
                "outputMinWidth": 0
            },
            {
                "code": "template-columns",
                "heading": "Template Columns",
                "description": "Columns in CSS Grid are vertical tracks that run along the horizontal axis of the grid. They define the horizontal space in which grid items are placed. Each column can have a specific width, or it can adjust its width dynamically based on the content or available space.",
                "editorHeight": 400,
                "outputMinWidth": 1100
            },
            {
                "code": "grid-template",
                "heading": "Grid Template",
                "description": "The grid-template property in CSS Grid layout is a shorthand property that allows you to set both grid-template-rows and grid-template-columns in a single declaration.",
                "editorHeight": 200,
                "outputHeight": 190,
                "outputMinWidth": 400
            },
            {
                "code": "template-areas",
                "heading": "Template Areas",
                "description": "Grid Template Areas allow you to define the layout of your grid using named grid areas. ",
                "explain": "<p><strong>Row 1:&nbsp</strong>'&nbsp;areaItem1 &nbsp;areaItem1 . . &nbsp;areaItem2 . . .'</p><ul><li>&nbsp;&nbsp;&nbsp;&nbsp; In this row, there are eight cells.</li><li>&nbsp;&nbsp;&nbsp;&nbsp; The first two cells are named<code>&nbsp;areaItem1</code>, followed by four empty cells denoted by dots (<code>.</code>), and then<code>&nbsp;areaItem2</code>.</li><li>&nbsp;&nbsp;&nbsp;&nbsp; So,<code>&nbsp;areaItem1</code>&nbsp;spans two columns and is repeated twice.<code>&nbsp;areaItem2</code>&nbsp;spans one column.</li></ul><p><br><strong>Row 2:&nbsp</strong>'. . &nbsp;areaItem3 &nbsp;areaItem3 &nbsp;areaItem3 . . .'</p><ul><li>&nbsp;&nbsp;&nbsp;&nbsp; This row has eight cells.</li><li>&nbsp;&nbsp;&nbsp;&nbsp; There are three consecutive cells with the name<code>&nbsp;areaItem3</code>, followed by two empty cells on each side.</li><li>&nbsp;&nbsp;&nbsp;&nbsp; So,<code>&nbsp;areaItem3</code>&nbsp;spans three columns.</li></ul><p><br><strong>Row 3:&nbsp</strong>'. . . . . . . .'</p><ul><li>&nbsp;&nbsp;&nbsp;&nbsp; This row has eight empty cells denoted by dots (<code>.</code>).</li><li>&nbsp;&nbsp;&nbsp;&nbsp; It's an empty row with no named areas.</li></ul><p><br><strong>Row 4:&nbsp</strong>'&nbsp;areaItem4 &nbsp;areaItem4 &nbsp;areaItem4 &nbsp;areaItem4 &nbsp;areaItem4 &nbsp;areaItem4 &nbsp;areaItem4 &nbsp;areaItem4'</p><ul><li>&nbsp;&nbsp;&nbsp;&nbsp; This row has eight cells, and each cell is named<code>&nbsp;areaItem4</code>.</li><li>&nbsp;&nbsp;&nbsp;&nbsp; So,<code>&nbsp;areaItem4</code>&nbsp;spans all eight columns in this row.</li></ul>",
                "editorHeight": 400,
                "outputHeight": 150
            }
        ]
    },
    {
        "code": "fr-unit",
        "slug": "fr-unit",
        "heading": "Fr unit",
        "description": "The fr unit in CSS Grid layout stands for \"fractional unit\" and is used to distribute available space proportionally among grid tracks (rows or columns). Grid layout behaves like a ratio between items.",
        "content": [
            {
                "code": "fr-unit-template-column",
                "editorHeight": 500
            },
            {
                "code": "fr-unit-template-row",
                "outputHeight": 280,
                "outputMinWidth": 0
            }
        ]
    },
    {
        "code": "repeat",
        "slug": "repeat",
        "heading": "Repeat",
        "description": "The repeat() function in CSS is not exclusive to grid layouts. While it is commonly used with CSS Grid to create repeated patterns of rows and columns.",
        "content": [
            {
                "code": "repeat",
                "outputHeight": 280,
                "outputMinWidth": 0
            }
        ]
    },
    {
        "code": "grid-gap",
        "slug": "grid-gap",
        "heading": "Grid Gap",
        "description": "Grid gaps (or gutters) are the spaces between grid tracks (rows and columns) within a grid layout. They provide visual separation between grid items and improve readability and aesthetics.",
        "content": [
            {
                "code": "grid-gap",
                "editorHeight": 300,
                "outputHeight": 400,
                "outputMinWidth": 0
            },
            {
                "code": "grid-gap-others",
                "description": "If you use the value normal, the browser will use its default gap size, typically equivalent to 1em. <br><br> The auto value for gap will not apply any gap between grid tracks. It's equivalent to setting the gap to 0. <br><br> Using grid-gap: inherit; sets the gap between grid tracks (rows and columns) to inherit the value from its parent element. <br><br> Negative values for the gap will show error",
                "editorHeight": 500,
                "outputHeight": 500,
                "outputMinWidth": 0
            },
            {
                "code": "row-gap",
                "heading": "Row Gap",
                "description": "Row-gap sets the size of the gap between rows.",
                "editorHeight": 200,
                "outputHeight": 100,
                "outputMinWidth": 0
            },
            {
                "code": "column-gap",
                "heading": "Column Gap",
                "description": "column-gap sets the size of the gap between columns.",
                "editorHeight": 200,
                "outputHeight": 120,
                "outputMinWidth": 0
            }
        ]
    },
    {
        "code": "rows-and-columns",
        "slug": "rows-and-columns",
        "heading": "Row and Column",
        "description": "The grid-row and grid-column properties in CSS Grid layout are used to explicitly define the placement of grid items along the row and column axes within a grid container.",
        "content": [
            {
                "code": "rows",
                "heading": "Row",
                "description": "The grid-row property is used to specify the grid lines on which a grid item starts and ends along the row axis.",
                "editorHeight": 300
            },
            {
                "code": "rows-span",
                "heading": "Row Span",
                "description": "The \"span\" value is often used with \"grid-row\" to specify how many rows a grid item should span. For example, if you set grid-row: span 2;, the grid item will occupy two rows in the grid.",
                "editorHeight": 300,
                "outputHeight": 220
            },
            {
                "code": "columns",
                "heading": "Column",
                "description": "The grid-column property is used to specify the grid lines on which a grid item starts and ends along the column axis.",
                "editorHeight": 400,
                "outputHeight": 200
            },
            {
                "code": "columns-span",
                "heading": "Column Span",
                "description": "span <value> specifies the number of columns the grid item should span.",
                "editorHeight": 400,
                "outputHeight": 220
            },
            {
                "code": "row-column-combine",
                "heading": "Row Column Combine",
                "description": "To position grid items across both rows and columns, you can use both grid-row and grid-column properties together.",
                "editorHeight": 200,
                "outputHeight": 200
            }
        ]
    },
    {
        "code": "aligning-items",
        "slug": "aligning-items",
        "heading": "Aligning Items",
        "description": "You can align grid items both horizontally and vertically",
        "content": [
            {
                "code": "justify-items",
                "heading": "Justify Items",
                "description": "The justify-items property aligns grid items along the inline (row) axis within their grid areas.",
                "editorHeight": 400,
                "outputHeight": 420,
                "outputMinWidth": 500
            },
            {
                "code": "align-items",
                "heading": "Align Items",
                "description": "The align-content property aligns the grid along the block (column) axis inside the grid container.",
                "editorHeight": 400,
                "outputHeight": 500,
                "outputMinWidth": 0
            },
            {
                "code": "place-items",
                "heading": "Place Items",
                "description": "The place-items property is a shorthand for setting both justify-items and align-items properties simultaneously.",
                "editorHeight": 300,
                "outputHeight": 500,
                "outputMinWidth": 0
            },
            {
                "code": "justify-content",
                "heading": "Justify Content",
                "description": "The justify-content property aligns the grid along the inline (row) axis inside the grid container.",
                "editorHeight": 500,
                "outputHeight": 500,
                "outputMinWidth": 0
            },
            {
                "code": "align-content",
                "heading": "Align Content",
                "description": "The align-content property in CSS Grid layout aligns the grid along the block (column) axis inside the grid container when there is extra space in the grid container. It controls how multiple rows of grid tracks are aligned within the grid container.",
                "editorHeight": 500,
                "outputHeight": 500,
                "outputMinWidth": 0
            },
            {
                "code": "place-content",
                "heading": "Place Content",
                "description": "The place-content property is a shorthand for setting both justify-content and align-content properties simultaneously.",
                "editorHeight": 500,
                "outputHeight": 500,
                "outputMinWidth": 0
            },
            {
                "code": "align-self",
                "heading": "Align Self",
                "description": "The align-self property aligns a single grid item along the block (column) axis within its grid area.",
                "editorHeight": 300,
                "outputHeight": 300,
                "outputMinWidth": 0
            },
            {
                "code": "justify-self",
                "heading": "Justify Self",
                "description": "The justify-self property aligns a single grid item along the inline (row) axis within its grid area.",
                "editorHeight": 300,
                "outputHeight": 150,
                "outputMinWidth": 0
            },
            {
                "code": "place-self",
                "heading": "Place Self",
                "description": "The place-self property is a shorthand property that allows you to set both the align-self and justify-self properties of grid items in a single declaration.",
                "editorHeight": 200,
                "outputHeight": 190,
                "outputMinWidth": 0
            }
        ]
    }
]